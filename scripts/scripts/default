#!/bin/bash




### Variables ###
PARAM=$#
RUNCONFIGUREHOOK="false"
RUNREMOVEHOOK="false"
RUNPREINSTALLHOOK="false"
RUNCHECKINSTALLHOOK="false"
CONFIGPATH=""
VENDORID=$(lspci -n | sed -n "s/.* 0300:.\(....\).*/\1/p")
DEVICEID=$(lspci -n | sed -n "s/.* 0300: ${VENDORID}:\(....\).*/\1/p")
HOOKARGUMENT=""



### Module Functions ###


mhwd_load_Module()
{
	local loadedmodules="$(ls /sys/module)"
	local moduleisloaded="false"

	if [ -z "${loadedmodules}" ]; then
		return 1 	#false
	fi

	for loadedmodule in ${loadedmodules} ; do
		if [ "$1" == "$loadedmodule" ]; then
			moduleisloaded="true"
		fi
	done

	if [ "$moduleisloaded" == "false" ]; then
		modprobe $1
	fi

	return 0 #true
}


mhwd_unload_Module()
{
	local loadedmodules="$(ls /sys/module)"

	if [ -z "${loadedmodules}" ]; then
		return 1 	#false
	fi

	for loadedmodule in ${loadedmodules} ; do
		if [ "$1" == "$loadedmodule" ]; then
			modprobe -r $1
			break
		fi
	done

	return 0 #true
}


# Make them readonly
declare -fr mhwd_load_Module mhwd_unload_Module




### Hook Functions ###

HOOKARGUMENT=""
declare -A hook_funcs
remove_hook_funcs=""
preinstall_hook_funcs=""
checkinstall_hook_funcs=""
local_after_configure_hook_funcs=""



## Private

add_local_after_configure_hook() {
	[[ $1 ]] || return 1
	for hookfunc in $1; do
		local_after_configure_hook_funcs+=" $hookfunc"
	done
}


run_local_after_configure_hook() {
	local i=0
	local func

	for func in ${local_after_configure_hook_funcs}; do
		"${func}" "${HOOKARGUMENT}"
		let i+=1
	done

	if [ "${i}" -eq 0 ]; then
		return 1
	fi
	return 0
}




## Public


add_preinstall_hook() {
	[[ $1 ]] || return 1
	for hookfunc in $1; do
		preinstall_hook_funcs+=" $hookfunc"
	done
}


run_preinstall_hook() {
	local i=0
	local func

	for func in ${preinstall_hook_funcs}; do
		"${func}" "${HOOKARGUMENT}"
		let i+=1
	done

	if [ "${i}" -eq 0 ]; then
		return 1
	fi
	return 0
}


add_remove_hook() {
	[[ $1 ]] || return 1
	for hookfunc in $1; do
		remove_hook_funcs+=" $hookfunc"
	done
}

run_remove_hook() {
	local i=0
	local func

	for func in ${remove_hook_funcs}; do
		"${func}" "${HOOKARGUMENT}"
		let i+=1
	done

	if [ "${i}" -eq 0 ]; then
		return 1
	fi
	return 0
}



add_checkinstall_hook() {
	[[ $1 ]] || return 1
	for hookfunc in $1; do
		checkinstall_hook_funcs+=" $hookfunc"
	done
}

run_checkinstall_hook() {
	local func

	for func in ${checkinstall_hook_funcs}; do
		"${func}" "${HOOKARGUMENT}"
		
		if [ "$?" -ne 0 ]; then
			return 1
		fi
	done

	return 0
}



add_configure_hook() {
	[[ $1 && $2 ]] || return 1
	for hookfunc in $2; do
		for hookstring in $1; do
			hook_funcs["$hookstring"]+=" $hookfunc"
		done
	done
}

run_configure_hook() {
	[[ $1 ]] || return 1
	local i=0
	local func
	for func in ${hook_funcs["$1"]}; do
		"${func}" "${HOOKARGUMENT}"
		let i+=1
	done

	if [ "${i}" -eq 0 ]; then
		return 1
	fi
	return 0
}




# Make them readonly
declare -fr add_configure_hook run_configure_hook add_remove_hook run_remove_hook add_preinstall_hook run_preinstall_hook add_checkinstall_hook run_checkinstall_hook




### --- ###



if [ "${PARAM}" -lt 1 ]; then
	echo "No Option!"
	exit 1
fi


for (( I=1; $I <= $PARAM; I++ ))
do
	case "$1" in
		--run_configure_hook)
			shift
			RUNCONFIGUREHOOK="$1"
			;;
		--run_remove_hook)
			shift
			RUNREMOVEHOOK="$1"
			;;
		--run_preinstall_hook)
			shift
			RUNPREINSTALLHOOK="$1"
			;;
		--run_checkinstall_hook)
			shift
			RUNCHECKINSTALLHOOK="$1"
			;;
		--config_path)
			shift
			CONFIGPATH="$1"
			;;
		"")	;;
		*)
			echo "Wrong Option: $1"
			exit 1
			;;
	esac

    shift
done


if [ "${CONFIGPATH}" != "" ] && [ -f "${CONFIGPATH}" ]; then
	. "${CONFIGPATH}"
	# Now include additional functions for this group
	if [ -f "/usr/share/mhwd/GROUPINCLUDES/${CLASSID}" ]; then
		. "/usr/share/mhwd/GROUPINCLUDES/${CLASSID}"
	fi
else
	exit 1
fi

if [ "${RUNPREINSTALLHOOK}" == "true" ]; then
	run_preinstall_hook
fi
if [ "${RUNCONFIGUREHOOK}" == "true" ]; then
	# Run hook for the Deviceid if one is declared otherwise run the default hook
	run_configure_hook "id${DEVICEID}"
	if [ "$?" -eq "1" ]; then
		run_configure_hook default
		if [ "$?" -eq "1" ]; then
			echo "Error! Config '${CONFIGPATH}' has no default hook!"
			exit 1
		fi
	fi

	run_local_after_configure_hook
fi
if [ "${RUNREMOVEHOOK}" == "true" ]; then
	run_remove_hook
fi
if [ "${RUNCHECKINSTALLHOOK}" == "true" ]; then
	run_checkinstall_hook
	exit $?
fi




exit 0

