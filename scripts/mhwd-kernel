#!/bin/bash

# This script should exit on error
set -e

# do UID checking here so someone can at least get usage instructions
if [ "$EUID" != "0" ]; then
    echo "error: This script must be run as root."
    exit 1
fi

# check usage
if [ "$#" -ne 2 ]; then

  >&2 printf 'USAGE: %s new-kernel (uninstall current) yes/no\n' "$0"

  exit 1

fi

# switch to basic language
export LANG=C
export LC_MESSAGES=C

# variables to hold packages
ADDPKGS=""
REMOVEPKGS=""

# current kernel
CURRENT="linux$(uname -r | cut -d\. -f1,2 | sed s'/.//2')"

if [ "$CURRENT" = "$1" ]; then
    echo "error: You cant (un)install your current kernel!"
    exit 1
fi

# sync databases
pacman -Syy

for PKG in $(pacman -Qq | grep $CURRENT) ; do
    NEWPKG=$(echo $PKG | sed s/$CURRENT/$1/)
    PKGCHECK=`pacman -Ss "$NEWPKG" | grep "$NEWPKG" | head -1 | cut -d/ -f2 | cut -d' ' -f1`
    if [ "$NEWPKG" == "$PKGCHECK" ] ; then
       REMOVEPKGS="${REMOVEPKGS} $PKG"
       ADDPKGS="${ADDPKGS} $NEWPKG"
    fi
done


# Install new packages
if [ "${ADDPKGS}" != "" ]; then
    echo ""
    echo "> Installing new packages"
    pacman -S ${ADDPKGS} --noconfirm
else
    echo "warning: no packages have been installed! Did you enter a valid kernel?"
	exit 1
fi

# Remove all packages
if [ "${REMOVEPKGS}" != "" ] && [ "$2" == "yes" ]; then
    echo ""
    echo "> Removing packages"
    pacman -Rdd ${REMOVEPKGS} --noconfirm
fi



