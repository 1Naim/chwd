#!/bin/bash




### Module Functions ###


mhwd_load_Module()
{
	local loadedmodules="$(ls /sys/module)"
	local moduleisloaded="false"

	if [ -z "${loadedmodules}" ]; then
		return 1 	#false
	fi

	for loadedmodule in ${loadedmodules} ; do
		if [ "$1" == "$loadedmodule" ]; then
			moduleisloaded="true"
		fi
	done

	if [ "$moduleisloaded" == "false" ]; then
		modprobe $1
	fi

	return 0 #true
}


mhwd_unload_Module()
{
	local loadedmodules="$(ls /sys/module)"

	if [ -z "${loadedmodules}" ]; then
		return 1 	#false
	fi

	for loadedmodule in ${loadedmodules} ; do
		if [ "$1" == "$loadedmodule" ]; then
			modprobe -r $1
			break
		fi
	done

	return 0 #true
}


# Make them readonly
declare -fr mhwd_load_Module mhwd_unload_Module





### Main ###
PARAM=$#
INCLUDEPATH="/var/lib/mhwd/scripts/include"
PACMAN="pacman --noconfirm --noprogress --needed"
SYNC=""
INSTALL=""
REMOVE=""
CONFIGPATH=""
CACHEPATH="/var/cache/pacman/pkg"
PMCONFIG="/etc/pacman.conf"


if [ "${PARAM}" -lt 1 ]; then
	echo "No Arguments!"
	exit 1
fi


for (( I=1; $I <= $PARAM; I++ ))
do
	case "$1" in
		--install)
			INSTALL="true"
			;;
		--remove)
			REMOVE="true"
			;;
		--sync)
			SYNC="y"
			;;
		--cachedir)
			shift
			CACHEPATH="$1"
			;;
		--config)
			shift
			CONFIGPATH="$1"
			;;
		--pmconfig)
			shift
			PMCONFIG="$1"
			;;
		"")	;;
		*)
			echo "Wrong Argument: $1"
			exit 1
			;;
	esac

	shift
done


# Set final variables
PACMAN="${PACMAN} --cachedir ${CACHEPATH} --config ${PMCONFIG}"


if [ "${CONFIGPATH}" != "" ] && [ -f "${CONFIGPATH}" ]; then
	. "${CONFIGPATH}"

	# Now include additional functions for this group
	for classid in "${CLASSIDS}"
	do
		if [ -f "${INCLUDEPATH}/${classid}" ]; then
			. "${INCLUDEPATH}/${classid}"
		fi
	done
else
	exit 1
fi


if [ "${INSTALL}" == "true" ]; then
	# Run preinstall function
   if [ "`grep "pre_install" "${CONFIGPATH}" | cut -d"#" -f1 | cut -d"(" -f1 | grep "pre_install"`" == "pre_install" ]; then
	   pre_install
   fi

	# Remove conflicts
	if [ "${CONFLICTS}" != "" ]; then
		${PACMAN} -Rs "${CONFLICTS}"
		if [ "$?" -ne "0" ]; then
			echo "Error: pacman failed!"
			exit 1
		fi
	fi

	# Install dependencies
	if [ "${DEPENDS}" != "" ]; then
		${PACMAN} -S${SYNC} "${DEPENDS}"
		if [ "$?" -ne "0" ]; then
			echo "Error: pacman failed!"
			exit 1
		fi
	fi

	# Run postinstall function
   if [ "`grep "post_install" "${CONFIGPATH}" | cut -d"#" -f1 | cut -d"(" -f1 | grep "post_install"`" == "post_install" ]; then
	   post_install
   fi
fi


if [ "${REMOVE}" == "true" ]; then
	# Run preremove function
   if [ "`grep "pre_remove" "${CONFIGPATH}" | cut -d"#" -f1 | cut -d"(" -f1 | grep "pre_remove"`" == "pre_remove" ]; then
	   pre_remove
   fi

	# Remove dependencies
	if [ "${DEPENDS}" != "" ]; then
		${PACMAN} -Rs "${DEPENDS}"
		if [ "$?" -ne "0" ]; then
			echo "Error: pacman failed!"
			exit 1
		fi
	fi

	# Run postremove function
   if [ "`grep "post_remove" "${CONFIGPATH}" | cut -d"#" -f1 | cut -d"(" -f1 | grep "post_remove"`" == "post_remove" ]; then
	   post_remove
   fi
fi


exit 0
